#!/bin/bash
#
# OCF Resource Agent for managing firewall rules with iptables/nftables (multi-state)
#
# License: GNU GPLv2 or later

: ${OCF_FUNCTIONS_DIR=/usr/lib/ocf/lib/heartbeat}

# Source the OCF functions
if [ -f "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs" ]; then
    . "${OCF_FUNCTIONS_DIR}/ocf-shellfuncs"
else
    echo "Cannot find ocf-shellfuncs at ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs"
    exit 1
fi

# Explicitly list all environment variables used
: ${OCF_RESKEY_CRM_meta_interval:=0}
: ${OCF_RESKEY_CRM_meta_globally_unique:="false"}
: ${OCF_RESKEY_notify_delay:=0}
: ${OCF_RESKEY_envfile:=""}
: ${OCF_RESKEY_state:=""}

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

RESOURCE_NAME="firewall"
FIREWALL_TOOL=""
DEDICATED_CHAIN="PACEMAKER_FW"

# Promotion scores
SCORE_UNPROMOTED=5
SCORE_PROMOTED=10

# Validate IP/CIDR format
validate_ip() {
    local ip="$1"
    if ! [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(/[0-9]+)?$ ]] && ! [[ "$ip" =~ ^[a-fA-F0-9:]+(/[0-9]+)?$ ]]; then
        ocf_log err "Invalid IP/CIDR format: $ip"
        return 1
    fi
    return 0
}

# Detect firewall tool
detect_firewall_tool() {
    if command -v nft &>/dev/null; then
        FIREWALL_TOOL="nft"
        ocf_log info "Detected nftables"
    elif command -v iptables &>/dev/null; then
        FIREWALL_TOOL="iptables"
        ocf_log info "Detected iptables"
    else
        ocf_log err "No firewall tool available"
        return $OCF_ERR_GENERIC
    fi
}

# Update state file atomically
stateful_update() {
    local tempfile
    tempfile="$(mktemp "${OCF_RESKEY_state}.XXXXXX")"
    echo "$1" > "$tempfile"
    mv -f "$tempfile" "${OCF_RESKEY_state}"
}

# Set promotion score
set_promotion_score() {
    "${HA_SBIN_DIR}/crm_attribute" --promotion -v "$1"
}

# Idempotent rule management
configure_rules() {
    local ports="$OCF_RESKEY_ports"
    local source_ips="$OCF_RESKEY_source_ips"

    [ "$OCF_RESKEY_CRM_meta_role" = "Master" ] && return $OCF_SUCCESS

    case "$FIREWALL_TOOL" in
        nft)
            nft add table inet $RESOURCE_NAME 2>/dev/null || true
            nft add chain inet $RESOURCE_NAME $DEDICATED_CHAIN { type filter hook input priority 0\; } 2>/dev/null || true

            for ip in $(tr ',' ' ' <<< "$source_ips"); do
                for port in $(tr ',' ' ' <<< "$ports"); do
                    if ! nft list chain inet $RESOURCE_NAME $DEDICATED_CHAIN | grep -q "tcp dport $port ct state { established, related, new } reject"; then
                        nft add rule inet $RESOURCE_NAME $DEDICATED_CHAIN ip saddr $ip tcp dport $port ct state { established, related, new } reject with tcp reset || return $OCF_ERR_GENERIC
                    fi
                done
            done
            ;;
        iptables)
            iptables -N $DEDICATED_CHAIN 2>/dev/null || true
            iptables -C INPUT -j $DEDICATED_CHAIN 2>/dev/null || iptables -A INPUT -j $DEDICATED_CHAIN

            for ip in $(tr ',' ' ' <<< "$source_ips"); do
                for port in $(tr ',' ' ' <<< "$ports"); do
                    if ! iptables -C $DEDICATED_CHAIN -s "$ip" -p tcp --dport "$port" -j REJECT &>/dev/null; then
                        iptables -A $DEDICATED_CHAIN -s "$ip" -p tcp --dport "$port" -j REJECT || return $OCF_ERR_GENERIC
                    fi
                done
            done
            ;;
    esac
    ocf_log info "Firewall rules configured"
    return $OCF_SUCCESS
}

remove_rules() {
    case "$FIREWALL_TOOL" in
        nft)
            nft delete table inet $RESOURCE_NAME 2>/dev/null && ocf_log info "NFTables rules removed"
            ;;
        iptables)
            iptables -D INPUT -j $DEDICATED_CHAIN 2>/dev/null || true
            iptables -F $DEDICATED_CHAIN 2>/dev/null
            iptables -X $DEDICATED_CHAIN 2>/dev/null
            ocf_log info "Iptables rules removed"
            ;;
    esac
    return $OCF_SUCCESS
}

start() {
    ocf_log info "Starting firewall (Unpromoted)"
    detect_firewall_tool || return $OCF_ERR_GENERIC
    [ "$OCF_RESKEY_CRM_meta_role" != "Master" ] && configure_rules
    stateful_update Unpromoted
    set_promotion_score $SCORE_UNPROMOTED
    return $OCF_SUCCESS
}

stop() {
    ocf_log info "Stopping firewall"
    detect_firewall_tool || return $OCF_ERR_GENERIC
    remove_rules
    [ -f "${OCF_RESKEY_state}" ] && rm "${OCF_RESKEY_state}"
    "${HA_SBIN_DIR}/crm_attribute" --promotion -D
    return $OCF_SUCCESS
}

promote() {
    ocf_log info "Promoting firewall"
    detect_firewall_tool || return $OCF_ERR_GENERIC
    remove_rules
    stateful_update Promoted
    set_promotion_score $SCORE_PROMOTED
    return $OCF_SUCCESS
}

demote() {
    ocf_log info "Demoting firewall"
    detect_firewall_tool || return $OCF_ERR_GENERIC
    configure_rules
    stateful_update Unpromoted
    set_promotion_score $SCORE_UNPROMOTED
    return $OCF_SUCCESS
}

monitor() {
    detect_firewall_tool || return $OCF_ERR_GENERIC
    local expected_role="${OCF_RESKEY_CRM_meta_role:-Unpromoted}"

    case "$FIREWALL_TOOL" in
        nft)
            if [ "$expected_role" = "Master" ]; then
                nft list table inet $RESOURCE_NAME &>/dev/null && return $OCF_NOT_RUNNING
            else
                nft list table inet $RESOURCE_NAME &>/dev/null || return $OCF_NOT_RUNNING
            fi
            ;;
        iptables)
            if [ "$expected_role" = "Master" ]; then
                iptables -nL $DEDICATED_CHAIN &>/dev/null && return $OCF_NOT_RUNNING
            else
                iptables -nL $DEDICATED_CHAIN &>/dev/null || return $OCF_NOT_RUNNING
            fi
            ;;
    esac
    return $OCF_SUCCESS
}

validate_all() {
    [ -z "$OCF_RESKEY_ports" ] && { ocf_log err "'ports' required"; return $OCF_ERR_CONFIGURED; }
    [ -z "$OCF_RESKEY_source_ips" ] && { ocf_log err "'source_ips' required"; return $OCF_ERR_CONFIGURED; }

    local port
    for port in $(tr ',' ' ' <<< "$OCF_RESKEY_ports"); do
        [[ "$port" =~ ^[0-9]+$ ]] && [ "$port" -le 65535 ] || {
            ocf_log err "Invalid port: $port";
            return $OCF_ERR_CONFIGURED;
        }
    done

    local ip
    for ip in $(tr ',' ' ' <<< "$OCF_RESKEY_source_ips"); do
        validate_ip "$ip" || return $OCF_ERR_CONFIGURED
    done

    return $OCF_SUCCESS
}

# Metadata with multi-state support
meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="firewall" version="1.1">
    <version>1.1</version>
    <longdesc lang="en">
        Stateful firewall agent managing rules with iptables/nftables.
        Unpromoted state blocks traffic, Promoted state allows it.
    </longdesc>
    <shortdesc lang="en">Stateful firewall agent</shortdesc>

    <parameters>
        <parameter name="state" unique-group="state">
            <longdesc lang="en">Path to state file</longdesc>
            <shortdesc lang="en">State file</shortdesc>
            <content type="string" default="${HA_VARRUN}/firewall-\${OCF_RESOURCE_INSTANCE}.state"/>
        </parameter>
        <parameter name="ports" required="1">
            <longdesc lang="en">Comma-separated TCP ports to block in Unpromoted state</longdesc>
            <shortdesc lang="en">Ports to block</shortdesc>
        </parameter>
        <parameter name="source_ips" required="1">
            <longdesc lang="en">Comma-separated source IPs to block</longdesc>
            <shortdesc lang="en">Source IPs</shortdesc>
        </parameter>
        <parameter name="notify_delay">
            <longdesc lang="en">Delay seconds in notify action</longdesc>
            <shortdesc lang="en">Notify delay</shortdesc>
            <content type="integer" default="0"/>
        </parameter>
    </parameters>

    <actions>
        <action name="start"        timeout="20s"/>
        <action name="stop"         timeout="20s"/>
        <action name="promote"      timeout="10s"/>
        <action name="demote"       timeout="10s"/>
        <action name="monitor"      timeout="20s" interval="10s" role="Promoted"/>
        <action name="monitor"      timeout="20s" interval="15s" role="Unpromoted"/>
        <action name="notify"       timeout="5s"/>
        <action name="meta-data"    timeout="5s"/>
        <action name="validate-all" timeout="30s"/>
    </actions>
</resource-agent>
END
}

# Handle state file location
if [ -z "$OCF_RESKEY_state" ]; then
    if [ "${OCF_RESKEY_CRM_meta_globally_unique}" = "false" ]; then
        OCF_RESKEY_state="${HA_VARRUN}/firewall-${OCF_RESOURCE_INSTANCE}.state"
    else
        OCF_RESKEY_state="${HA_VARRUN}/firewall-${OCF_RESOURCE_INSTANCE}.state"
    fi
fi

case "$1" in
    start|stop|promote|demote|monitor|validate-all)
        $1 ;;
    meta-data) meta_data;;
    notify)
        sleep ${OCF_RESKEY_notify_delay:-0}
        exit $OCF_SUCCESS ;;
    *)  echo "Usage: $0 {start|stop|promote|demote|monitor|validate-all|meta-data|notify}"
        exit 1 ;;
esac

exit $?
